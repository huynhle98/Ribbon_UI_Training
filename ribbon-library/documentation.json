{
    "pipes": [],
    "interfaces": [
        {
            "name": "Item",
            "id": "interface-Item-b8826ce86e21612bcc53b7dfa114fdff",
            "file": "projects/ribbon-lib/src/lib/model/item.ts",
            "type": "interface",
            "sourceCode": "export interface Item  {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  count: number;\r\n  img: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "img",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiHelperService",
            "id": "injectable-ApiHelperService-92010973a2deb095b05452b9e3b2d56a",
            "file": "projects/ribbon-lib/src/lib/service/api-helper/api-helper.service.ts",
            "properties": [
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n    params: {},\r\n    responseType: null\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendRequest",
                    "args": [
                        {
                            "name": "method",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "data",
                            "type": ""
                        },
                        {
                            "name": "callback",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiHelperService {\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n    params: {},\r\n    responseType: null\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  sendRequest(method: string, url: string, data, callback) {\r\n    if (data) {\r\n      this.httpOptions.params = data;\r\n    }\r\n    this.httpOptions.responseType = 'json';\r\n    // return this.http.request(method, url, this.httpOptions).toPromise().then(res => {\r\n    //   res.json().data;\r\n    // }).catch(this.handleError);\r\n    return this.http.request(method, url, this.httpOptions)\r\n      .toPromise()\r\n      .then( response => { callback(response)})\r\n      .catch(this.handleError);\r\n  }\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      console.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RibbonLibService",
            "id": "injectable-RibbonLibService-ec835fce6dbff6070c4e2dd90e0c496f",
            "file": "projects/ribbon-lib/src/lib/ribbon-lib.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RibbonLibService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-7979ed501e6fb74fbc17b793cfbb5718",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo() {\r\n    return browser.get(browser.baseUrl) as Promise<any>;\r\n  }\r\n\r\n  getTitleText() {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f0f1a60a83a31ea3974e3b16c4353f1e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'ribbon-library'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ApiHelperService } from 'ribbon-lib';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'ribbon-library';\r\n  data: any;\r\n\r\n  constructor(private apiHelperService: ApiHelperService) {\r\n    // this.data = this.apiHelperService.sendRequest('get', 'https://jsonplaceholder.typicode.com/posts', null,\r\n    // console.log(this.data);\r\n    this.apiHelperService.sendRequest('get', 'https://corona.lmao.ninja/v2/countries/vn', null, (res) => {\r\n      this.data = JSON.stringify(res);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apiHelperService",
                        "type": "ApiHelperService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "apiHelperService",
                        "type": "ApiHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<!-- <lib-loading-over [state]=\"true\"></lib-loading-over> -->\r\n<!-- <lib-home-ico></lib-home-ico> -->\r\n<!-- <lib-shopping-cart-ico></lib-shopping-cart-ico> -->\r\n{{data}}\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-0ac9391093290caffe176d38375bde77-1",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 21
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "line": 13,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input() primary = false;\n  @Input() backgroundColor?: string;\n\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  @Output() onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n    font-weight: 700;\r\n    border: 0;\r\n    border-radius: 3em;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    line-height: 1;\r\n}\r\n\r\n.storybook-button--primary {\r\n    color: white;\r\n    background-color: #1ea7fd;\r\n}\r\n\r\n.storybook-button--secondary {\r\n    color: #333;\r\n    background-color: transparent;\r\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n\r\n.storybook-button--small {\r\n    font-size: 12px;\r\n    padding: 10px 16px;\r\n}\r\n\r\n.storybook-button--medium {\r\n    font-size: 14px;\r\n    padding: 11px 20px;\r\n}\r\n\r\n.storybook-button--large {\r\n    font-size: 16px;\r\n    padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 25
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\n    {{ label }}\n  </button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ec7f0dc57ddd0dc2ba2553e405c5dfde-2",
            "file": "projects/ribbon-lib/src/lib/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lib-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "line": 15
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "line": 13,
                    "type": "\"small\" | \"medium\" | \"large\""
                },
                {
                    "name": "type",
                    "defaultValue": "'lb-btn--primary'",
                    "line": 11
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-lib-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input() primary = false;\n  @Input() type = 'lb-btn--primary';\n  @Input() backgroundColor?: string;\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  @Input() label = 'Button';\n\n  @Output() onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    // const mode = this.primary ? 'lb-btn--primary' : 'lb-btn--secondary';\n    return ['storybook-button', `storybook-button--${this.size}`, this.type];\n  }\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n    font-weight: 700;\r\n    border: 0;\r\n    border-radius: 0.3rem;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    line-height: 1;\r\n}\r\n\r\n.lb-btn--primary {\r\n    color: white;\r\n    background-color: #1ea7fd;\r\n}\r\n\r\n.lb-btn--error {\r\n    color: white;\r\n    background-color: #D32F2F;\r\n}\r\n\r\n.lb-btn--success {\r\n    color: white;\r\n    background-color: #689F38;\r\n}\r\n\r\n.lb-btn--warning {\r\n    color: white;\r\n    background-color: #FBC02D;\r\n}\r\n\r\n.lb-btn--secondary {\r\n    color: white;\r\n    background-color: #727272;\r\n    /* box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset; */\r\n}\r\n\r\n.storybook-button--small {\r\n    font-size: 12px;\r\n    padding: 10px 16px;\r\n}\r\n\r\n.storybook-button--medium {\r\n    font-size: 14px;\r\n    padding: 11px 20px;\r\n}\r\n\r\n.storybook-button--large {\r\n    font-size: 16px;\r\n    padding: 12px 24px;\r\n}",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 19
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ButtonComponent-2",
            "templateData": "<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\n    {{ label }}\n  </button>"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-2187c1e179b8c1be44613061339da87c",
            "file": "projects/ribbon-lib/src/lib/components/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lib-cart",
            "styleUrls": [
                "./cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 11
                }
            ],
            "outputsClass": [
                {
                    "name": "onMinusEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPlusEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemoveEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShoppingNow",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onMinusItem",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPlusItem",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveItem",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShopping",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Items } from '../../data/items';\n\n@Component({\n  selector: 'app-lib-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})\nexport class CartComponent implements OnInit {\n\n  @Input() items = [];\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onMinusEvent = new EventEmitter<any>();\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onPlusEvent = new EventEmitter<any>();\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onRemoveEvent = new EventEmitter<any>();\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onShoppingNow = new EventEmitter<any>();\n\n  constructor() {\n    // this.items = Items;\n  }\n\n  ngOnInit(): void {\n  }\n\n  onMinusItem(event) {\n    this.onMinusEvent.emit(event);\n  }\n  onPlusItem(event) {\n    this.onPlusEvent.emit(event);\n  }\n  onShopping(event) {\n    this.onShoppingNow.emit(event);\n  }\n  onRemoveItem(event) {\n    this.onRemoveEvent.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../src/assets/css/ngicon.scss';\r\n.cart {\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    max-width: 1280px;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    margin: auto;\r\n    &-item {\r\n        display: flex;\r\n        border-bottom: 1px solid #dddddd;\r\n        padding: 0 1rem;\r\n        $width: 150px;\r\n        align-items: center;\r\n        &--img {\r\n            width: $width;\r\n            height: $width;\r\n            object-fit: cover;\r\n        }\r\n        &--content {\r\n            display: flex;\r\n            width: calc(100% - #{$width});\r\n            align-items: center;\r\n            flex-wrap: wrap;\r\n            padding: 0.5rem 1rem;\r\n        }\r\n        &--info {\r\n            width: 40%;\r\n            font-weight: 600;\r\n            font-size: 18px;\r\n        }\r\n        &--count {\r\n            width: 25%;\r\n            display: flex;\r\n            justify-content: center;\r\n            input {\r\n                width: 25px;\r\n                text-align: center;\r\n                border: none;\r\n            }\r\n            input:focus {\r\n                outline: none;\r\n            }\r\n            span {\r\n                width: 20px;\r\n                height: 20px;\r\n                cursor: pointer;\r\n                border: 1px solid #c5c5c5;\r\n                background: #eeeeee;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                user-select: none;\r\n            }\r\n        }\r\n        &--price {\r\n            width: 25%;\r\n            text-align: right;\r\n        }\r\n        &--remove {\r\n            width: 10%;\r\n            cursor: pointer;\r\n            text-align: right;\r\n        }\r\n        &--remove:hover {\r\n            color: red;\r\n        }\r\n    }\r\n    &-empty {\r\n        width: 100%;\r\n        display: flex;\r\n        // justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        margin-top: 20vh;\r\n    }\r\n}\r\n\r\n.ngico-cart-arrow-down {\r\n    font-size: 30px;\r\n    color: #818181;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.ngico-cart-arrow-down::before {\r\n    content: \"\\f218\";\r\n}\r\n\r\n@media screen and (max-width: 575.98px) {\r\n    .cart {\r\n        &-item {\r\n            $width: 70px;\r\n            padding: 0 0.5rem;\r\n            &--img {\r\n                width: $width;\r\n                height: $width;\r\n            }\r\n            &--content {\r\n                width: calc(100% - #{$width});\r\n            }\r\n            &--info {\r\n                width: 100%;\r\n                font-size: 15px;\r\n                margin-bottom: 0.1rem;\r\n            }\r\n            &--count {\r\n                width: 50%;\r\n                justify-content: start;\r\n                span {\r\n                    width: 15px;\r\n                    height: 15px;\r\n                }\r\n                input {\r\n                    font-size: 13px;\r\n                }\r\n            }\r\n            &--price {\r\n                width: 100%;\r\n                text-align: left;\r\n                font-size: 13px;\r\n                margin-bottom: 0.4rem;\r\n            }\r\n            &--remove {\r\n                width: 50%;\r\n                font-size: 13px;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"cart\">\n    <div *ngIf=\"items.length > 0\">\n        <div *ngFor=\"let item of items\" class=\"cart-item\">\n            <img [src]=\"item.img\" alt=\"\" class=\"cart-item--img\">\n            <div class=\"cart-item--content\">\n                <span class=\"cart-item--info\">{{item.name}}</span>\n                <span class=\"cart-item--price\">{{item.price * item.count | currency:'USD'}}</span>\n                <div class=\"cart-item--count\">\n                    <span (click)=\"onMinusItem($event)\">-</span>\n                    <input type=\"text\" [value]=\"item.count\">\n                    <span (click)=\"onPlusItem($event)\">+</span>\n                </div>\n                <span class=\"cart-item--remove\" (click)=\"onRemoveItem($event)\">Remove</span>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"items.length === 0\" class=\"cart-empty\">\n        <h3>Your cart is empty</h3>\n        <i class=\"ngico ngico-cart-arrow-down\"></i>\n        <app-lib-button [primary]=\"true\" type=\"lb-btn--primary\" backgroundColor=\"undefined\" size=\"medium\" label=\"Shopping Now\" (click)=\"onShopping($event)\"></app-lib-button>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeIcoComponent",
            "id": "component-HomeIcoComponent-ab08f4b7827f4d9e4f62320fcf68d68c",
            "file": "projects/ribbon-lib/src/lib/components/icons/home-ico/home-ico.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-home-ico",
            "styleUrls": [
                "./home-ico.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home-ico.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'lib-home-ico',\r\n  templateUrl: './home-ico.component.html',\r\n  styleUrls: ['./home-ico.component.css']\r\n})\r\nexport class HomeIcoComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('/assets/css/ngicon.css');\r\n.ngico-home::before {\r\n    content: \"\\f015\";\r\n}\r\n",
                    "styleUrl": "./home-ico.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<i class=\"ngico ngico-home\"></i>\r\n"
        },
        {
            "name": "LoadingOverComponent",
            "id": "component-LoadingOverComponent-f3b9d81681711a0bff4130f6cc4278f5",
            "file": "projects/ribbon-lib/src/lib/components/loading-over/loading-over.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-loading-over",
            "styleUrls": [
                "./loading-over.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-over.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cls",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges } from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'lib-loading-over',\r\n  templateUrl: './loading-over.component.html',\r\n  styleUrls: ['./loading-over.component.css']\r\n})\r\nexport class LoadingOverComponent implements OnInit, OnChanges {\r\n\r\n  @Input() state: boolean;\r\n  cls = '';\r\n\r\n  constructor() {\r\n    this.state = false;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  ngOnChanges(): void {\r\n    if (this.state) {\r\n      this.cls = ' active';\r\n    }\r\n    else {\r\n      this.cls = '';\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lazy-loading {\r\n    display: none;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1000;\r\n}\r\n\r\n.lazy-loading-bgr {\r\n    width: 50px;\r\n    height: 50px;\r\n    text-align: center;\r\n    position: relative;\r\n}\r\n\r\n.lazy-loading.active {\r\n    display: flex;\r\n}\r\n\r\n.lazy-loading-svg {\r\n    animation: lazy-loading-rotate 2s linear infinite;\r\n    height: 100%;\r\n    transform-origin: center center;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    margin: auto;\r\n}\r\n\r\n.lazy-loading-circle {\r\n    stroke-dasharray: 89, 200;\r\n    stroke-dashoffset: 0;\r\n    stroke: white;\r\n    animation: lazy-loading-dash 1.5s ease-in-out infinite;\r\n    /* p-progress-spinner-color 6s ease-in-out infinite; */\r\n    stroke-linecap: round;\r\n}\r\n\r\n@keyframes lazy-loading-rotate {\r\n    to {\r\n        transform: rotate(1turn)\r\n    }\r\n}\r\n\r\n@keyframes lazy-loading-dash {\r\n    0% {\r\n        stroke-dasharray: 1, 200;\r\n        stroke-dashoffset: 0\r\n    }\r\n    50% {\r\n        stroke-dasharray: 89, 200;\r\n        stroke-dashoffset: -35px\r\n    }\r\n    to {\r\n        stroke-dasharray: 89, 200;\r\n        stroke-dashoffset: -124px\r\n    }\r\n}\r\n\r\n@keyframes lazy-loading-color {\r\n    0%,\r\n    to {\r\n        /* stroke: #d62d20 */\r\n    }\r\n    40% {\r\n        /* stroke: #0057e7 */\r\n    }\r\n    66% {\r\n        /* stroke: #008744 */\r\n    }\r\n    80%,\r\n    90% {\r\n        /* stroke: #ffa700 */\r\n    }\r\n}\r\n",
                    "styleUrl": "./loading-over.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div [class]=\"'lazy-loading'+ cls\">\r\n    <div class=\"lazy-loading-bgr\">\r\n        <svg viewBox=\"25 25 50 50\" class=\"lazy-loading-svg\" style=\"animation-duration: 2s;\">\r\n      <circle cx=\"50\" cy=\"50\" r=\"20\" stroke-miterlimit=\"10\" class=\"lazy-loading-circle\" fill=\"none\"\r\n        stroke-width=\"5\">\r\n      </circle>\r\n    </svg>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RibbonLibComponent",
            "id": "component-RibbonLibComponent-406b049564fdb153f10e002294e58e34",
            "file": "projects/ribbon-lib/src/lib/ribbon-lib.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-ribbon-lib",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  ribbon-lib works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-ribbon-lib',\r\n  template: `\r\n    <p>\r\n      ribbon-lib works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class RibbonLibComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ShoppingCartIcoComponent",
            "id": "component-ShoppingCartIcoComponent-7e8fca015b83a809debebb56fffc615c",
            "file": "projects/ribbon-lib/src/lib/components/icons/shopping-cart-ico/shopping-cart-ico.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-shopping-cart-ico",
            "styleUrls": [
                "./shopping-cart-ico.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart-ico.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'lib-shopping-cart-ico',\r\n  templateUrl: './shopping-cart-ico.component.html',\r\n  styleUrls: ['./shopping-cart-ico.component.css']\r\n})\r\nexport class ShoppingCartIcoComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ngico-shopping-cart::before {\r\n    position: absolute;\r\n    /* color: var(--fa-primary-color, inherit); */\r\n    opacity: 1;\r\n    /* opacity: var(--fa-primary-opacity, 1); */\r\n    content: \"\\f07a\";\r\n}\r\n\r\n.ngico-shopping-cart::after {\r\n    content: \"\\10f07a\";\r\n    opacity: .4;\r\n}\r\n",
                    "styleUrl": "./shopping-cart-ico.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<i class=\"ngico ngico-shopping-cart\"></i>\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-a7adf4a388e04eac1a75cdfaa891acc5",
            "file": "projects/ribbon-lib/src/lib/components/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-test",
            "styleUrls": [
                "./test.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "line": 10
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'lib-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n\n  @Input() label = 'Button';\n  @Output() onClick = new EventEmitter<Event>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\" (click)=\"onClick.emit($event)\">\n    {{ label }}\n  </button>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RibbonLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RibbonLibModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiHelperService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CartComponent"
                        },
                        {
                            "name": "HomeIcoComponent"
                        },
                        {
                            "name": "LoadingOverComponent"
                        },
                        {
                            "name": "RibbonLibComponent"
                        },
                        {
                            "name": "ShoppingCartIcoComponent"
                        },
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CartComponent"
                        },
                        {
                            "name": "HomeIcoComponent"
                        },
                        {
                            "name": "LoadingOverComponent"
                        },
                        {
                            "name": "RibbonLibComponent"
                        },
                        {
                            "name": "ShoppingCartIcoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/data/items.ts",
                "type": "Item[]",
                "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    name: 'Swift 3 Laptop - SF314-57-59EY',\r\n    price: 679.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/498287eea7a0275e365252f1a4eb6f93/a/c/acer-swift-3-sf314-57-gray-main.png'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Swift 3 Laptop - SF313-52-526M',\r\n    price: 729.99,\r\n    count: 2,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/db8ab1691ef1fbce51c71761b0dae42e/s/w/swift3-sf313-52-52g-silver-modelmain-athena_3.png'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Swift 3 Laptop - SF314-59-75QC',\r\n    price: 699.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/db8ab1691ef1fbce51c71761b0dae42e/a/c/acer-swift-3_sf314-59_fp-backlit_silver_modelmain_evo.png'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Nitro 5 Gaming Laptop - AN515-44-R0DL',\r\n    price: 1099.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/7645a9d936c7fcb584614a3e98291904/a/c/acer-nitro-5_an515-44_red-kb_modelmain_1.png'\r\n  }\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "Story<CartComponent>",
                "defaultValue": "(args: CartComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ribbon-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ribbon-lib/src/lib/components/button/btn.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                    "type": "Story<CartComponent>",
                    "defaultValue": "(args: CartComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "projects/ribbon-lib/src/lib/data/items.ts": [
                {
                    "name": "Items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ribbon-lib/src/lib/data/items.ts",
                    "type": "Item[]",
                    "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    name: 'Swift 3 Laptop - SF314-57-59EY',\r\n    price: 679.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/498287eea7a0275e365252f1a4eb6f93/a/c/acer-swift-3-sf314-57-gray-main.png'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Swift 3 Laptop - SF313-52-526M',\r\n    price: 729.99,\r\n    count: 2,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/db8ab1691ef1fbce51c71761b0dae42e/s/w/swift3-sf313-52-52g-silver-modelmain-athena_3.png'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Swift 3 Laptop - SF314-59-75QC',\r\n    price: 699.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/db8ab1691ef1fbce51c71761b0dae42e/a/c/acer-swift-3_sf314-59_fp-backlit_silver_modelmain_evo.png'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Nitro 5 Gaming Laptop - AN515-44-R0DL',\r\n    price: 1099.99,\r\n    count: 1,\r\n    img: 'https://static-ecpa.acer.com/media/catalog/product/cache/7645a9d936c7fcb584614a3e98291904/a/c/acer-nitro-5_an515-44_red-kb_modelmain_1.png'\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/cart/cart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/icons/home-ico/home-ico.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeIcoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/icons/shopping-cart-ico/shopping-cart-ico.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartIcoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/loading-over/loading-over.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingOverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/components/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/data/items.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/model/item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/ribbon-lib.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RibbonLibComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/ribbon-lib.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RibbonLibService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/lib/service/api-helper/api-helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ribbon-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}